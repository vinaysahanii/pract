import 'dart:io';

import 'package:path_provider/path_provider.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';

class DatabaseHelper {
  static const _dbName = "student.db";
  static const _dbVersion = 1;
  static const _tabName = "student";
  static const columnID = "_id";
  static const columnName = "name";

  DatabaseHelper._privateConstructor();

  static final DatabaseHelper instance = DatabaseHelper._privateConstructor();
  static Database? _database;

  Future<Database?> get database async {
    _database??= await _initiateDatabase();
    return _database;
  }

  //creating a database
  _initiateDatabase() async {
    Directory directory = await getApplicationDocumentsDirectory();
    String path = join(directory.path, _dbName);
    return await openDatabase(path, version: _dbVersion, onCreate: _onCreate);
  }

  //Creating a table
  Future _onCreate(Database db, int version) async {
    db.execute(
      '''
      CREATE TABLE $_tabName(
        $columnID INTEGER PRIMARY KEY,
        $columnName TEXT NOT NULL,
      )
      '''
    );
  }

  Future<int> insert(Map<String, dynamic> row) async {
    Database? db = await instance.database;
    return await db!.insert(_tabName, row);
  }

  Future<List<Map<String, dynamic>>> showAll() async {
    Database? db = await instance.database;
    return await db!.query(_tabName);
  }

  Future<int> update(Map<String, dynamic> row) async {
    Database? db = await instance.database;
    int id = row[columnID];
    return await db!.update(_tabName, row, where: '$columnID =?', whereArgs: [id]);
  }

  Future<int> delete(int id) async {
    Database? db = await instance.database;
    return await db!.delete(_tabName, where: '$columnID =?', whereArgs: [id]);
  }
}